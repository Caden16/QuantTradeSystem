// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from order.proto</summary>
public static partial class OrderReflection {

  #region Descriptor
  /// <summary>File descriptor for order.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OrderReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtvcmRlci5wcm90byKlAgoNUUFfTWFya2V0X2JpZBINCgVwcmljZRgBIAEo",
          "AhIMCgRkYXRlGAIgASgJEhAKCGRhdGV0aW1lGAMgASgJEhQKDHNlbmRpbmdf",
          "dGltZRgEIAEoCRIVCg10cmFuc2FjdF90aW1lGAUgASgJEg4KBmFtb3VudBgG",
          "IAEoAhIPCgd0b3dhcmRzGAcgASgDEgwKBGNvZGUYCCABKAkSDAoEdXNlchgJ",
          "IAEoCRIQCghzdHJhdGVneRgKIAEoCRIMCgR0eXBlGAsgASgJEhEKCWJpZF9t",
          "b2RlbBgMIAEoCRIUCgxhbW91bnRfbW9kZWwYDSABKAkSEAoIb3JkZXJfaWQY",
          "DiABKAkSEAoIdHJhZGVfaWQYDyABKAkSDgoGc3RhdHVzGBAgASgJYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::QA_Market_order), global::QA_Market_order.Parser, new[]{ "Price", "Date", "Datetime", "SendingTime", "TransactTime", "Amount", "Towards", "Code", "User", "Strategy", "Type", "BidModel", "AmountModel", "OrderId", "TradeId", "Status" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class QA_Market_order : pb::IMessage<QA_Market_order> {
  private static readonly pb::MessageParser<QA_Market_order> _parser = new pb::MessageParser<QA_Market_order>(() => new QA_Market_order());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QA_Market_order> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OrderReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QA_Market_order() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QA_Market_order(QA_Market_order other) : this() {
    price_ = other.price_;
    date_ = other.date_;
    datetime_ = other.datetime_;
    sendingTime_ = other.sendingTime_;
    transactTime_ = other.transactTime_;
    amount_ = other.amount_;
    towards_ = other.towards_;
    code_ = other.code_;
    user_ = other.user_;
    strategy_ = other.strategy_;
    type_ = other.type_;
    bidModel_ = other.bidModel_;
    amountModel_ = other.amountModel_;
    orderId_ = other.orderId_;
    tradeId_ = other.tradeId_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QA_Market_order Clone() {
    return new QA_Market_order(this);
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 1;
  private float price_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Price {
    get { return price_; }
    set {
      price_ = value;
    }
  }

  /// <summary>Field number for the "date" field.</summary>
  public const int DateFieldNumber = 2;
  private string date_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Date {
    get { return date_; }
    set {
      date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "datetime" field.</summary>
  public const int DatetimeFieldNumber = 3;
  private string datetime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Datetime {
    get { return datetime_; }
    set {
      datetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sending_time" field.</summary>
  public const int SendingTimeFieldNumber = 4;
  private string sendingTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SendingTime {
    get { return sendingTime_; }
    set {
      sendingTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "transact_time" field.</summary>
  public const int TransactTimeFieldNumber = 5;
  private string transactTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransactTime {
    get { return transactTime_; }
    set {
      transactTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 6;
  private float amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  /// <summary>Field number for the "towards" field.</summary>
  public const int TowardsFieldNumber = 7;
  private long towards_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Towards {
    get { return towards_; }
    set {
      towards_ = value;
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 8;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 9;
  private string user_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string User {
    get { return user_; }
    set {
      user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "strategy" field.</summary>
  public const int StrategyFieldNumber = 10;
  private string strategy_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Strategy {
    get { return strategy_; }
    set {
      strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 11;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "order_model" field.</summary>
  public const int BidModelFieldNumber = 12;
  private string bidModel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BidModel {
    get { return bidModel_; }
    set {
      bidModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "amount_model" field.</summary>
  public const int AmountModelFieldNumber = 13;
  private string amountModel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AmountModel {
    get { return amountModel_; }
    set {
      amountModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "order_id" field.</summary>
  public const int OrderIdFieldNumber = 14;
  private string orderId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OrderId {
    get { return orderId_; }
    set {
      orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "trade_id" field.</summary>
  public const int TradeIdFieldNumber = 15;
  private string tradeId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TradeId {
    get { return tradeId_; }
    set {
      tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 16;
  private string status_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Status {
    get { return status_; }
    set {
      status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QA_Market_order);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QA_Market_order other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Price != other.Price) return false;
    if (Date != other.Date) return false;
    if (Datetime != other.Datetime) return false;
    if (SendingTime != other.SendingTime) return false;
    if (TransactTime != other.TransactTime) return false;
    if (Amount != other.Amount) return false;
    if (Towards != other.Towards) return false;
    if (Code != other.Code) return false;
    if (User != other.User) return false;
    if (Strategy != other.Strategy) return false;
    if (Type != other.Type) return false;
    if (BidModel != other.BidModel) return false;
    if (AmountModel != other.AmountModel) return false;
    if (OrderId != other.OrderId) return false;
    if (TradeId != other.TradeId) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Price != 0F) hash ^= Price.GetHashCode();
    if (Date.Length != 0) hash ^= Date.GetHashCode();
    if (Datetime.Length != 0) hash ^= Datetime.GetHashCode();
    if (SendingTime.Length != 0) hash ^= SendingTime.GetHashCode();
    if (TransactTime.Length != 0) hash ^= TransactTime.GetHashCode();
    if (Amount != 0F) hash ^= Amount.GetHashCode();
    if (Towards != 0L) hash ^= Towards.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (User.Length != 0) hash ^= User.GetHashCode();
    if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (BidModel.Length != 0) hash ^= BidModel.GetHashCode();
    if (AmountModel.Length != 0) hash ^= AmountModel.GetHashCode();
    if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
    if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
    if (Status.Length != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Price != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Price);
    }
    if (Date.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Date);
    }
    if (Datetime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Datetime);
    }
    if (SendingTime.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(SendingTime);
    }
    if (TransactTime.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(TransactTime);
    }
    if (Amount != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Amount);
    }
    if (Towards != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(Towards);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Code);
    }
    if (User.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(User);
    }
    if (Strategy.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Strategy);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Type);
    }
    if (BidModel.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(BidModel);
    }
    if (AmountModel.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(AmountModel);
    }
    if (OrderId.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(OrderId);
    }
    if (TradeId.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(TradeId);
    }
    if (Status.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Price != 0F) {
      size += 1 + 4;
    }
    if (Date.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
    }
    if (Datetime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Datetime);
    }
    if (SendingTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SendingTime);
    }
    if (TransactTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactTime);
    }
    if (Amount != 0F) {
      size += 1 + 4;
    }
    if (Towards != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Towards);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (User.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
    }
    if (Strategy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Strategy);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (BidModel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BidModel);
    }
    if (AmountModel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AmountModel);
    }
    if (OrderId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
    }
    if (TradeId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeId);
    }
    if (Status.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QA_Market_order other) {
    if (other == null) {
      return;
    }
    if (other.Price != 0F) {
      Price = other.Price;
    }
    if (other.Date.Length != 0) {
      Date = other.Date;
    }
    if (other.Datetime.Length != 0) {
      Datetime = other.Datetime;
    }
    if (other.SendingTime.Length != 0) {
      SendingTime = other.SendingTime;
    }
    if (other.TransactTime.Length != 0) {
      TransactTime = other.TransactTime;
    }
    if (other.Amount != 0F) {
      Amount = other.Amount;
    }
    if (other.Towards != 0L) {
      Towards = other.Towards;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.User.Length != 0) {
      User = other.User;
    }
    if (other.Strategy.Length != 0) {
      Strategy = other.Strategy;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.BidModel.Length != 0) {
      BidModel = other.BidModel;
    }
    if (other.AmountModel.Length != 0) {
      AmountModel = other.AmountModel;
    }
    if (other.OrderId.Length != 0) {
      OrderId = other.OrderId;
    }
    if (other.TradeId.Length != 0) {
      TradeId = other.TradeId;
    }
    if (other.Status.Length != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          Price = input.ReadFloat();
          break;
        }
        case 18: {
          Date = input.ReadString();
          break;
        }
        case 26: {
          Datetime = input.ReadString();
          break;
        }
        case 34: {
          SendingTime = input.ReadString();
          break;
        }
        case 42: {
          TransactTime = input.ReadString();
          break;
        }
        case 53: {
          Amount = input.ReadFloat();
          break;
        }
        case 56: {
          Towards = input.ReadInt64();
          break;
        }
        case 66: {
          Code = input.ReadString();
          break;
        }
        case 74: {
          User = input.ReadString();
          break;
        }
        case 82: {
          Strategy = input.ReadString();
          break;
        }
        case 90: {
          Type = input.ReadString();
          break;
        }
        case 98: {
          BidModel = input.ReadString();
          break;
        }
        case 106: {
          AmountModel = input.ReadString();
          break;
        }
        case 114: {
          OrderId = input.ReadString();
          break;
        }
        case 122: {
          TradeId = input.ReadString();
          break;
        }
        case 130: {
          Status = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

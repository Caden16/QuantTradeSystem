// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_day.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stock_day.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class stock_dayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<stock_day>
     _instance;
} _stock_day_default_instance_;

namespace protobuf_stock_5fday_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, date_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, preclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_day, adj_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(stock_day)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_stock_day_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stock_day.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _stock_day_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_stock_day_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017stock_day.proto\"\262\001\n\tstock_day\022\014\n\004code\030"
      "\001 \001(\t\022\014\n\004open\030\002 \001(\002\022\014\n\004high\030\003 \001(\002\022\013\n\003low"
      "\030\004 \001(\002\022\r\n\005close\030\005 \001(\002\022\016\n\006volume\030\006 \001(\002\022\014\n"
      "\004date\030\007 \001(\t\022\016\n\006amount\030\010 \001(\002\022\022\n\ndate_stam"
      "p\030\t \001(\t\022\020\n\010preclose\030\n \001(\002\022\013\n\003adj\030\013 \001(\00221"
      "\n\rSearchService\022 \n\006Search\022\n.stock_day\032\n."
      "stock_dayb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stock_day.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_stock_5fday_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stock_day::kCodeFieldNumber;
const int stock_day::kOpenFieldNumber;
const int stock_day::kHighFieldNumber;
const int stock_day::kLowFieldNumber;
const int stock_day::kCloseFieldNumber;
const int stock_day::kVolumeFieldNumber;
const int stock_day::kDateFieldNumber;
const int stock_day::kAmountFieldNumber;
const int stock_day::kDateStampFieldNumber;
const int stock_day::kPrecloseFieldNumber;
const int stock_day::kAdjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stock_day::stock_day()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stock_5fday_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_day)
}
stock_day::stock_day(const stock_day& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  date_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date_stamp().size() > 0) {
    date_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_stamp_);
  }
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&adj_) -
    reinterpret_cast<char*>(&open_)) + sizeof(adj_));
  // @@protoc_insertion_point(copy_constructor:stock_day)
}

void stock_day::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adj_) -
      reinterpret_cast<char*>(&open_)) + sizeof(adj_));
  _cached_size_ = 0;
}

stock_day::~stock_day() {
  // @@protoc_insertion_point(destructor:stock_day)
  SharedDtor();
}

void stock_day::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_stamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void stock_day::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stock_day::descriptor() {
  protobuf_stock_5fday_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stock_5fday_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stock_day& stock_day::default_instance() {
  protobuf_stock_5fday_2eproto::InitDefaults();
  return *internal_default_instance();
}

stock_day* stock_day::New(::google::protobuf::Arena* arena) const {
  stock_day* n = new stock_day;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void stock_day::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_day)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adj_) -
      reinterpret_cast<char*>(&open_)) + sizeof(adj_));
  _internal_metadata_.Clear();
}

bool stock_day::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock_day)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stock_day.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float high = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float low = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float close = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stock_day.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date_stamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_stamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date_stamp().data(), static_cast<int>(this->date_stamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stock_day.date_stamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float preclose = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float adj = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock_day)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock_day)
  return false;
#undef DO_
}

void stock_day::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock_day)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_day.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // float open = 2;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->open(), output);
  }

  // float high = 3;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->high(), output);
  }

  // float low = 4;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->low(), output);
  }

  // float close = 5;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->close(), output);
  }

  // float volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->volume(), output);
  }

  // string date = 7;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_day.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->date(), output);
  }

  // float amount = 8;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->amount(), output);
  }

  // string date_stamp = 9;
  if (this->date_stamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_stamp().data(), static_cast<int>(this->date_stamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_day.date_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->date_stamp(), output);
  }

  // float preclose = 10;
  if (this->preclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->preclose(), output);
  }

  // float adj = 11;
  if (this->adj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->adj(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stock_day)
}

::google::protobuf::uint8* stock_day::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stock_day)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_day.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // float open = 2;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->open(), target);
  }

  // float high = 3;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->high(), target);
  }

  // float low = 4;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->low(), target);
  }

  // float close = 5;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->close(), target);
  }

  // float volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->volume(), target);
  }

  // string date = 7;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_day.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->date(), target);
  }

  // float amount = 8;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->amount(), target);
  }

  // string date_stamp = 9;
  if (this->date_stamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_stamp().data(), static_cast<int>(this->date_stamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_day.date_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->date_stamp(), target);
  }

  // float preclose = 10;
  if (this->preclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->preclose(), target);
  }

  // float adj = 11;
  if (this->adj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->adj(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_day)
  return target;
}

size_t stock_day::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_day)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string date = 7;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string date_stamp = 9;
  if (this->date_stamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date_stamp());
  }

  // float open = 2;
  if (this->open() != 0) {
    total_size += 1 + 4;
  }

  // float high = 3;
  if (this->high() != 0) {
    total_size += 1 + 4;
  }

  // float low = 4;
  if (this->low() != 0) {
    total_size += 1 + 4;
  }

  // float close = 5;
  if (this->close() != 0) {
    total_size += 1 + 4;
  }

  // float volume = 6;
  if (this->volume() != 0) {
    total_size += 1 + 4;
  }

  // float amount = 8;
  if (this->amount() != 0) {
    total_size += 1 + 4;
  }

  // float preclose = 10;
  if (this->preclose() != 0) {
    total_size += 1 + 4;
  }

  // float adj = 11;
  if (this->adj() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stock_day::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_day)
  GOOGLE_DCHECK_NE(&from, this);
  const stock_day* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stock_day>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_day)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_day)
    MergeFrom(*source);
  }
}

void stock_day::MergeFrom(const stock_day& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_day)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.date_stamp().size() > 0) {

    date_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_stamp_);
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.preclose() != 0) {
    set_preclose(from.preclose());
  }
  if (from.adj() != 0) {
    set_adj(from.adj());
  }
}

void stock_day::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_day)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stock_day::CopyFrom(const stock_day& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_day)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stock_day::IsInitialized() const {
  return true;
}

void stock_day::Swap(stock_day* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stock_day::InternalSwap(stock_day* other) {
  using std::swap;
  code_.Swap(&other->code_);
  date_.Swap(&other->date_);
  date_stamp_.Swap(&other->date_stamp_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  swap(volume_, other->volume_);
  swap(amount_, other->amount_);
  swap(preclose_, other->preclose_);
  swap(adj_, other->adj_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata stock_day::GetMetadata() const {
  protobuf_stock_5fday_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stock_5fday_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// stock_day

// string code = 1;
void stock_day::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& stock_day::code() const {
  // @@protoc_insertion_point(field_get:stock_day.code)
  return code_.GetNoArena();
}
void stock_day::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_day.code)
}
#if LANG_CXX11
void stock_day::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_day.code)
}
#endif
void stock_day::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_day.code)
}
void stock_day::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_day.code)
}
::std::string* stock_day::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:stock_day.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* stock_day::release_code() {
  // @@protoc_insertion_point(field_release:stock_day.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void stock_day::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:stock_day.code)
}

// float open = 2;
void stock_day::clear_open() {
  open_ = 0;
}
float stock_day::open() const {
  // @@protoc_insertion_point(field_get:stock_day.open)
  return open_;
}
void stock_day::set_open(float value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:stock_day.open)
}

// float high = 3;
void stock_day::clear_high() {
  high_ = 0;
}
float stock_day::high() const {
  // @@protoc_insertion_point(field_get:stock_day.high)
  return high_;
}
void stock_day::set_high(float value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:stock_day.high)
}

// float low = 4;
void stock_day::clear_low() {
  low_ = 0;
}
float stock_day::low() const {
  // @@protoc_insertion_point(field_get:stock_day.low)
  return low_;
}
void stock_day::set_low(float value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:stock_day.low)
}

// float close = 5;
void stock_day::clear_close() {
  close_ = 0;
}
float stock_day::close() const {
  // @@protoc_insertion_point(field_get:stock_day.close)
  return close_;
}
void stock_day::set_close(float value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:stock_day.close)
}

// float volume = 6;
void stock_day::clear_volume() {
  volume_ = 0;
}
float stock_day::volume() const {
  // @@protoc_insertion_point(field_get:stock_day.volume)
  return volume_;
}
void stock_day::set_volume(float value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:stock_day.volume)
}

// string date = 7;
void stock_day::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& stock_day::date() const {
  // @@protoc_insertion_point(field_get:stock_day.date)
  return date_.GetNoArena();
}
void stock_day::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_day.date)
}
#if LANG_CXX11
void stock_day::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_day.date)
}
#endif
void stock_day::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_day.date)
}
void stock_day::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_day.date)
}
::std::string* stock_day::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:stock_day.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* stock_day::release_date() {
  // @@protoc_insertion_point(field_release:stock_day.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void stock_day::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:stock_day.date)
}

// float amount = 8;
void stock_day::clear_amount() {
  amount_ = 0;
}
float stock_day::amount() const {
  // @@protoc_insertion_point(field_get:stock_day.amount)
  return amount_;
}
void stock_day::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:stock_day.amount)
}

// string date_stamp = 9;
void stock_day::clear_date_stamp() {
  date_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& stock_day::date_stamp() const {
  // @@protoc_insertion_point(field_get:stock_day.date_stamp)
  return date_stamp_.GetNoArena();
}
void stock_day::set_date_stamp(const ::std::string& value) {
  
  date_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_day.date_stamp)
}
#if LANG_CXX11
void stock_day::set_date_stamp(::std::string&& value) {
  
  date_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_day.date_stamp)
}
#endif
void stock_day::set_date_stamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_day.date_stamp)
}
void stock_day::set_date_stamp(const char* value, size_t size) {
  
  date_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_day.date_stamp)
}
::std::string* stock_day::mutable_date_stamp() {
  
  // @@protoc_insertion_point(field_mutable:stock_day.date_stamp)
  return date_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* stock_day::release_date_stamp() {
  // @@protoc_insertion_point(field_release:stock_day.date_stamp)
  
  return date_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void stock_day::set_allocated_date_stamp(::std::string* date_stamp) {
  if (date_stamp != NULL) {
    
  } else {
    
  }
  date_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_stamp);
  // @@protoc_insertion_point(field_set_allocated:stock_day.date_stamp)
}

// float preclose = 10;
void stock_day::clear_preclose() {
  preclose_ = 0;
}
float stock_day::preclose() const {
  // @@protoc_insertion_point(field_get:stock_day.preclose)
  return preclose_;
}
void stock_day::set_preclose(float value) {
  
  preclose_ = value;
  // @@protoc_insertion_point(field_set:stock_day.preclose)
}

// float adj = 11;
void stock_day::clear_adj() {
  adj_ = 0;
}
float stock_day::adj() const {
  // @@protoc_insertion_point(field_get:stock_day.adj)
  return adj_;
}
void stock_day::set_adj(float value) {
  
  adj_ = value;
  // @@protoc_insertion_point(field_set:stock_day.adj)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

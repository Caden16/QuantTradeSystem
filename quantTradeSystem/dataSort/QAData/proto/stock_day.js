/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.stock_day');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stock_day = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stock_day, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stock_day.displayName = 'proto.stock_day';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stock_day.prototype.toObject = function(opt_includeInstance) {
  return proto.stock_day.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stock_day} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stock_day.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    open: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    high: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    low: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    close: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    volume: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    date: jspb.Message.getFieldWithDefault(msg, 7, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    dateStamp: jspb.Message.getFieldWithDefault(msg, 9, ""),
    preclose: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    adj: +jspb.Message.getFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stock_day}
 */
proto.stock_day.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stock_day;
  return proto.stock_day.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stock_day} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stock_day}
 */
proto.stock_day.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHigh(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLow(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setClose(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateStamp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPreclose(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAdj(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stock_day.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stock_day.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stock_day} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stock_day.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getDateStamp();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPreclose();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAdj();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.stock_day.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stock_day.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float open = 2;
 * @return {number}
 */
proto.stock_day.prototype.getOpen = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setOpen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float high = 3;
 * @return {number}
 */
proto.stock_day.prototype.getHigh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setHigh = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float low = 4;
 * @return {number}
 */
proto.stock_day.prototype.getLow = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setLow = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float close = 5;
 * @return {number}
 */
proto.stock_day.prototype.getClose = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setClose = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float volume = 6;
 * @return {number}
 */
proto.stock_day.prototype.getVolume = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string date = 7;
 * @return {string}
 */
proto.stock_day.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.stock_day.prototype.setDate = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional float amount = 8;
 * @return {number}
 */
proto.stock_day.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string date_stamp = 9;
 * @return {string}
 */
proto.stock_day.prototype.getDateStamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.stock_day.prototype.setDateStamp = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional float preclose = 10;
 * @return {number}
 */
proto.stock_day.prototype.getPreclose = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setPreclose = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float adj = 11;
 * @return {number}
 */
proto.stock_day.prototype.getAdj = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.stock_day.prototype.setAdj = function(value) {
  jspb.Message.setField(this, 11, value);
};



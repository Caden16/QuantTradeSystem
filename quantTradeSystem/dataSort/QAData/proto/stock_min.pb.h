// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_min.proto

#ifndef PROTOBUF_stock_5fmin_2eproto__INCLUDED
#define PROTOBUF_stock_5fmin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class stock_min;
class stock_minDefaultTypeInternal;
extern stock_minDefaultTypeInternal _stock_min_default_instance_;

namespace protobuf_stock_5fmin_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_stock_5fmin_2eproto

// ===================================================================

class stock_min : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stock_min) */ {
 public:
  stock_min();
  virtual ~stock_min();

  stock_min(const stock_min& from);

  inline stock_min& operator=(const stock_min& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stock_min(stock_min&& from) noexcept
    : stock_min() {
    *this = ::std::move(from);
  }

  inline stock_min& operator=(stock_min&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const stock_min& default_instance();

  static inline const stock_min* internal_default_instance() {
    return reinterpret_cast<const stock_min*>(
               &_stock_min_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(stock_min* other);
  friend void swap(stock_min& a, stock_min& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stock_min* New() const PROTOBUF_FINAL { return New(NULL); }

  stock_min* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const stock_min& from);
  void MergeFrom(const stock_min& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(stock_min* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string date = 7;
  void clear_date();
  static const int kDateFieldNumber = 7;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string date_stamp = 9;
  void clear_date_stamp();
  static const int kDateStampFieldNumber = 9;
  const ::std::string& date_stamp() const;
  void set_date_stamp(const ::std::string& value);
  #if LANG_CXX11
  void set_date_stamp(::std::string&& value);
  #endif
  void set_date_stamp(const char* value);
  void set_date_stamp(const char* value, size_t size);
  ::std::string* mutable_date_stamp();
  ::std::string* release_date_stamp();
  void set_allocated_date_stamp(::std::string* date_stamp);

  // string datetime = 10;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 10;
  const ::std::string& datetime() const;
  void set_datetime(const ::std::string& value);
  #if LANG_CXX11
  void set_datetime(::std::string&& value);
  #endif
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  ::std::string* mutable_datetime();
  ::std::string* release_datetime();
  void set_allocated_datetime(::std::string* datetime);

  // string time_stamp = 11;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 11;
  const ::std::string& time_stamp() const;
  void set_time_stamp(const ::std::string& value);
  #if LANG_CXX11
  void set_time_stamp(::std::string&& value);
  #endif
  void set_time_stamp(const char* value);
  void set_time_stamp(const char* value, size_t size);
  ::std::string* mutable_time_stamp();
  ::std::string* release_time_stamp();
  void set_allocated_time_stamp(::std::string* time_stamp);

  // float open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  float open() const;
  void set_open(float value);

  // float high = 3;
  void clear_high();
  static const int kHighFieldNumber = 3;
  float high() const;
  void set_high(float value);

  // float low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  float low() const;
  void set_low(float value);

  // float close = 5;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  float close() const;
  void set_close(float value);

  // float volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  float volume() const;
  void set_volume(float value);

  // float amount = 8;
  void clear_amount();
  static const int kAmountFieldNumber = 8;
  float amount() const;
  void set_amount(float value);

  // @@protoc_insertion_point(class_scope:stock_min)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr date_stamp_;
  ::google::protobuf::internal::ArenaStringPtr datetime_;
  ::google::protobuf::internal::ArenaStringPtr time_stamp_;
  float open_;
  float high_;
  float low_;
  float close_;
  float volume_;
  float amount_;
  mutable int _cached_size_;
  friend struct protobuf_stock_5fmin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// stock_min

// string code = 1;
inline void stock_min::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stock_min::code() const {
  // @@protoc_insertion_point(field_get:stock_min.code)
  return code_.GetNoArena();
}
inline void stock_min::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_min.code)
}
#if LANG_CXX11
inline void stock_min::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_min.code)
}
#endif
inline void stock_min::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_min.code)
}
inline void stock_min::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_min.code)
}
inline ::std::string* stock_min::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:stock_min.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stock_min::release_code() {
  // @@protoc_insertion_point(field_release:stock_min.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stock_min::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:stock_min.code)
}

// float open = 2;
inline void stock_min::clear_open() {
  open_ = 0;
}
inline float stock_min::open() const {
  // @@protoc_insertion_point(field_get:stock_min.open)
  return open_;
}
inline void stock_min::set_open(float value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:stock_min.open)
}

// float high = 3;
inline void stock_min::clear_high() {
  high_ = 0;
}
inline float stock_min::high() const {
  // @@protoc_insertion_point(field_get:stock_min.high)
  return high_;
}
inline void stock_min::set_high(float value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:stock_min.high)
}

// float low = 4;
inline void stock_min::clear_low() {
  low_ = 0;
}
inline float stock_min::low() const {
  // @@protoc_insertion_point(field_get:stock_min.low)
  return low_;
}
inline void stock_min::set_low(float value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:stock_min.low)
}

// float close = 5;
inline void stock_min::clear_close() {
  close_ = 0;
}
inline float stock_min::close() const {
  // @@protoc_insertion_point(field_get:stock_min.close)
  return close_;
}
inline void stock_min::set_close(float value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:stock_min.close)
}

// float volume = 6;
inline void stock_min::clear_volume() {
  volume_ = 0;
}
inline float stock_min::volume() const {
  // @@protoc_insertion_point(field_get:stock_min.volume)
  return volume_;
}
inline void stock_min::set_volume(float value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:stock_min.volume)
}

// string date = 7;
inline void stock_min::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stock_min::date() const {
  // @@protoc_insertion_point(field_get:stock_min.date)
  return date_.GetNoArena();
}
inline void stock_min::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_min.date)
}
#if LANG_CXX11
inline void stock_min::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_min.date)
}
#endif
inline void stock_min::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_min.date)
}
inline void stock_min::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_min.date)
}
inline ::std::string* stock_min::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:stock_min.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stock_min::release_date() {
  // @@protoc_insertion_point(field_release:stock_min.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stock_min::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:stock_min.date)
}

// float amount = 8;
inline void stock_min::clear_amount() {
  amount_ = 0;
}
inline float stock_min::amount() const {
  // @@protoc_insertion_point(field_get:stock_min.amount)
  return amount_;
}
inline void stock_min::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:stock_min.amount)
}

// string date_stamp = 9;
inline void stock_min::clear_date_stamp() {
  date_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stock_min::date_stamp() const {
  // @@protoc_insertion_point(field_get:stock_min.date_stamp)
  return date_stamp_.GetNoArena();
}
inline void stock_min::set_date_stamp(const ::std::string& value) {
  
  date_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_min.date_stamp)
}
#if LANG_CXX11
inline void stock_min::set_date_stamp(::std::string&& value) {
  
  date_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_min.date_stamp)
}
#endif
inline void stock_min::set_date_stamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_min.date_stamp)
}
inline void stock_min::set_date_stamp(const char* value, size_t size) {
  
  date_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_min.date_stamp)
}
inline ::std::string* stock_min::mutable_date_stamp() {
  
  // @@protoc_insertion_point(field_mutable:stock_min.date_stamp)
  return date_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stock_min::release_date_stamp() {
  // @@protoc_insertion_point(field_release:stock_min.date_stamp)
  
  return date_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stock_min::set_allocated_date_stamp(::std::string* date_stamp) {
  if (date_stamp != NULL) {
    
  } else {
    
  }
  date_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_stamp);
  // @@protoc_insertion_point(field_set_allocated:stock_min.date_stamp)
}

// string datetime = 10;
inline void stock_min::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stock_min::datetime() const {
  // @@protoc_insertion_point(field_get:stock_min.datetime)
  return datetime_.GetNoArena();
}
inline void stock_min::set_datetime(const ::std::string& value) {
  
  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_min.datetime)
}
#if LANG_CXX11
inline void stock_min::set_datetime(::std::string&& value) {
  
  datetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_min.datetime)
}
#endif
inline void stock_min::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_min.datetime)
}
inline void stock_min::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_min.datetime)
}
inline ::std::string* stock_min::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:stock_min.datetime)
  return datetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stock_min::release_datetime() {
  // @@protoc_insertion_point(field_release:stock_min.datetime)
  
  return datetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stock_min::set_allocated_datetime(::std::string* datetime) {
  if (datetime != NULL) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:stock_min.datetime)
}

// string time_stamp = 11;
inline void stock_min::clear_time_stamp() {
  time_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stock_min::time_stamp() const {
  // @@protoc_insertion_point(field_get:stock_min.time_stamp)
  return time_stamp_.GetNoArena();
}
inline void stock_min::set_time_stamp(const ::std::string& value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_min.time_stamp)
}
#if LANG_CXX11
inline void stock_min::set_time_stamp(::std::string&& value) {
  
  time_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_min.time_stamp)
}
#endif
inline void stock_min::set_time_stamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_min.time_stamp)
}
inline void stock_min::set_time_stamp(const char* value, size_t size) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_min.time_stamp)
}
inline ::std::string* stock_min::mutable_time_stamp() {
  
  // @@protoc_insertion_point(field_mutable:stock_min.time_stamp)
  return time_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stock_min::release_time_stamp() {
  // @@protoc_insertion_point(field_release:stock_min.time_stamp)
  
  return time_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stock_min::set_allocated_time_stamp(::std::string* time_stamp) {
  if (time_stamp != NULL) {
    
  } else {
    
  }
  time_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_stamp);
  // @@protoc_insertion_point(field_set_allocated:stock_min.time_stamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stock_5fmin_2eproto__INCLUDED
